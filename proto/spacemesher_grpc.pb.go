// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: protoc/spacemesher.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Spacemesher_GetPlot_FullMethodName     = "/proto.Spacemesher/GetPlot"
	Spacemesher_GetWorkers_FullMethodName  = "/proto.Spacemesher/GetWorkers"
	Spacemesher_Jump_FullMethodName        = "/proto.Spacemesher/Jump"
	Spacemesher_CurrentTask_FullMethodName = "/proto.Spacemesher/CurrentTask"
)

// SpacemesherClient is the client API for Spacemesher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpacemesherClient interface {
	GetPlot(ctx context.Context, in *Postcli, opts ...grpc.CallOption) (*Plot, error)
	// rpc Plotting(Postcli) returns (StatusResp){}
	GetWorkers(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*Workers, error)
	Jump(ctx context.Context, in *Jump2File, opts ...grpc.CallOption) (*StatusResp, error)
	CurrentTask(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*Plot, error)
}

type spacemesherClient struct {
	cc grpc.ClientConnInterface
}

func NewSpacemesherClient(cc grpc.ClientConnInterface) SpacemesherClient {
	return &spacemesherClient{cc}
}

func (c *spacemesherClient) GetPlot(ctx context.Context, in *Postcli, opts ...grpc.CallOption) (*Plot, error) {
	out := new(Plot)
	err := c.cc.Invoke(ctx, Spacemesher_GetPlot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemesherClient) GetWorkers(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*Workers, error) {
	out := new(Workers)
	err := c.cc.Invoke(ctx, Spacemesher_GetWorkers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemesherClient) Jump(ctx context.Context, in *Jump2File, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, Spacemesher_Jump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemesherClient) CurrentTask(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*Plot, error) {
	out := new(Plot)
	err := c.cc.Invoke(ctx, Spacemesher_CurrentTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpacemesherServer is the server API for Spacemesher service.
// All implementations must embed UnimplementedSpacemesherServer
// for forward compatibility
type SpacemesherServer interface {
	GetPlot(context.Context, *Postcli) (*Plot, error)
	// rpc Plotting(Postcli) returns (StatusResp){}
	GetWorkers(context.Context, *StatusReq) (*Workers, error)
	Jump(context.Context, *Jump2File) (*StatusResp, error)
	CurrentTask(context.Context, *StatusReq) (*Plot, error)
	mustEmbedUnimplementedSpacemesherServer()
}

// UnimplementedSpacemesherServer must be embedded to have forward compatible implementations.
type UnimplementedSpacemesherServer struct {
}

func (UnimplementedSpacemesherServer) GetPlot(context.Context, *Postcli) (*Plot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlot not implemented")
}
func (UnimplementedSpacemesherServer) GetWorkers(context.Context, *StatusReq) (*Workers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkers not implemented")
}
func (UnimplementedSpacemesherServer) Jump(context.Context, *Jump2File) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Jump not implemented")
}
func (UnimplementedSpacemesherServer) CurrentTask(context.Context, *StatusReq) (*Plot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentTask not implemented")
}
func (UnimplementedSpacemesherServer) mustEmbedUnimplementedSpacemesherServer() {}

// UnsafeSpacemesherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpacemesherServer will
// result in compilation errors.
type UnsafeSpacemesherServer interface {
	mustEmbedUnimplementedSpacemesherServer()
}

func RegisterSpacemesherServer(s grpc.ServiceRegistrar, srv SpacemesherServer) {
	s.RegisterService(&Spacemesher_ServiceDesc, srv)
}

func _Spacemesher_GetPlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Postcli)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemesherServer).GetPlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Spacemesher_GetPlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemesherServer).GetPlot(ctx, req.(*Postcli))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spacemesher_GetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemesherServer).GetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Spacemesher_GetWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemesherServer).GetWorkers(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spacemesher_Jump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jump2File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemesherServer).Jump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Spacemesher_Jump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemesherServer).Jump(ctx, req.(*Jump2File))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spacemesher_CurrentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemesherServer).CurrentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Spacemesher_CurrentTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemesherServer).CurrentTask(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Spacemesher_ServiceDesc is the grpc.ServiceDesc for Spacemesher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spacemesher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Spacemesher",
	HandlerType: (*SpacemesherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlot",
			Handler:    _Spacemesher_GetPlot_Handler,
		},
		{
			MethodName: "GetWorkers",
			Handler:    _Spacemesher_GetWorkers_Handler,
		},
		{
			MethodName: "Jump",
			Handler:    _Spacemesher_Jump_Handler,
		},
		{
			MethodName: "CurrentTask",
			Handler:    _Spacemesher_CurrentTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/spacemesher.proto",
}
